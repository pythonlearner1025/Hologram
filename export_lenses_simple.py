#!/usr/bin/env python3
"""
Export optimized acoustic lenses using FreeCAD for multi-material polyjet printing.

This script generates .step files with proper material assignments for 
vendors like PCBWAY. Each lens is 30mm x 30mm with 0.25mm thickness,
containing 60x60 voxels (0.5mm each). Total stack: 30mm x 30mm x 1mm (4 lenses).

Materials:
- Agilus30 (soft, flexible)
- VeroClear (rigid, transparent)
"""

import numpy as np
import json
import os
from pathlib import Path
import sys

# Global variables for physical parameters
NUM_LENSES = None
LENS_WIDTH_MM = None
LENS_THICKNESS_MM = None
BACKING_THICKNESS_MM = None
GAP_BETWEEN_LENSES_MM = None
VOXEL_SIZE_MM = None
NUM_XY_SEGMENTS = None
TOTAL_VOXELS_PER_LENS = None

# Constants for this specific application
EXPECTED_LENS_WIDTH_MM = 30.0
EXPECTED_LENS_THICKNESS_MM = 0.25
EXPECTED_VOXEL_SIZE_MM = 0.5
EXPECTED_NUM_XY_SEGMENTS = 60  # 30mm / 0.5mm = 60
EXPECTED_TOTAL_THICKNESS_MM = 1.0  # 4 lenses * 0.25mm = 1.0mm

def params_to_lens_designs(params):
    """Convert parameter vector to lens material designs."""
    # Apply sigmoid to get material fractions [0, 1]
    def sigmoid(x):
        return 1 / (1 + np.exp(-x))
    
    material_fractions = sigmoid(params)
    
    # Reshape to (NUM_LENSES, NUM_XY_SEGMENTS, NUM_XY_SEGMENTS)
    lens_designs = material_fractions.reshape(NUM_LENSES, NUM_XY_SEGMENTS, NUM_XY_SEGMENTS)
    
    # Binarize: 1 = VeroClear (rigid), 0 = Agilus30 (flexible)
    binary_designs = (lens_designs > 0.5).astype(np.float32)
    
    return binary_designs

def generate_openscad_script(binary_designs, output_file):
    """Generate OpenSCAD script for visualization."""
    script = f"""// Generated by export_lenses_simple.py
// Lens stack: {NUM_LENSES} lenses, {LENS_WIDTH_MM}mm x {LENS_WIDTH_MM}mm
// Voxel grid: {NUM_XY_SEGMENTS} x {NUM_XY_SEGMENTS}, voxel size: {VOXEL_SIZE_MM}mm

module voxel(x, y, z) {{
    translate([x, y, z])
        cube([{VOXEL_SIZE_MM}, {VOXEL_SIZE_MM}, {LENS_THICKNESS_MM}]);
}}

"""
    
    current_z = 0
    for lens_idx in range(NUM_LENSES):
        script += f"\n// Lens {lens_idx + 1}\n"
        script += f"color([{0.2 + 0.2*lens_idx}, {0.5}, {0.8 - 0.15*lens_idx}]) {{\n"
        
        for i in range(NUM_XY_SEGMENTS):
            for j in range(NUM_XY_SEGMENTS):
                if binary_designs[lens_idx][i][j] > 0.5:
                    x = i * VOXEL_SIZE_MM
                    y = j * VOXEL_SIZE_MM
                    script += f"    voxel({x}, {y}, {current_z});\n"
        
        script += "}\n"
        current_z += LENS_THICKNESS_MM + GAP_BETWEEN_LENSES_MM
    
    with open(output_file, 'w') as f:
        f.write(script)

def export_voxel_grid(binary_designs, output_dir):
    """Export voxel grids as numpy arrays."""
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    for i in range(NUM_LENSES):
        filename = output_dir / f"lens_{i+1}_voxels.npy"
        np.save(filename, binary_designs[i])

def export_point_cloud(binary_design, output_file, z_offset=0):
    """Export solid voxel centers as point cloud."""
    points = []
    
    for i in range(NUM_XY_SEGMENTS):
        for j in range(NUM_XY_SEGMENTS):
            if binary_design[i][j] > 0.5:
                x = i * VOXEL_SIZE_MM + VOXEL_SIZE_MM/2
                y = j * VOXEL_SIZE_MM + VOXEL_SIZE_MM/2
                z = z_offset + LENS_THICKNESS_MM/2
                points.append([x, y, z])
    
    points = np.array(points)
    np.savetxt(output_file, points, fmt='%.6f', header='x y z', comments='')
    return len(points)

def export_multi_material_stl(binary_designs, output_dir):
    """Export separate STL files for each material using FreeCAD."""
    try:
        import FreeCAD
        import Part
        import Mesh
    except ImportError:
        print("ERROR: FreeCAD not found. Please install FreeCAD Python bindings.")
        print("Alternative: Using OpenSCAD-based export instead...")
        _export_multi_material_openscad(binary_designs, output_dir)
        return
    
    output_dir = Path(output_dir)
    multi_material_dir = output_dir / "multi_material_stl"
    multi_material_dir.mkdir(parents=True, exist_ok=True)
    
    # Create FreeCAD document
    doc = FreeCAD.newDocument("LensExport")
    
    # Material assignment for PolyJet
    material_info = {
        "Agilus30": {
            "code": "RGD_FFF00064",
            "description": "Flexible, rubber-like material"
        },
        "VeroClear": {
            "code": "RGD_810", 
            "description": "Rigid, transparent material"
        }
    }
    
    current_z = 0
    all_materials = []
    
    for lens_idx in range(NUM_LENSES):
        print(f"Processing lens {lens_idx + 1}/{NUM_LENSES}...")
        
        # Create separate shapes for each material
        agilus_shapes = []
        veroclear_shapes = []
        
        for i in range(NUM_XY_SEGMENTS):
            for j in range(NUM_XY_SEGMENTS):
                x = i * VOXEL_SIZE_MM
                y = j * VOXEL_SIZE_MM
                z = current_z
                
                # Create voxel as a box
                voxel_box = Part.makeBox(
                    VOXEL_SIZE_MM, 
                    VOXEL_SIZE_MM, 
                    LENS_THICKNESS_MM,
                    FreeCAD.Vector(x, y, z)
                )
                
                # Assign to appropriate material
                if binary_designs[lens_idx][i][j] > 0.5:
                    veroclear_shapes.append(voxel_box)
                else:
                    agilus_shapes.append(voxel_box)
        
        # Create compound shapes for each material
        if agilus_shapes:
            agilus_compound = Part.makeCompound(agilus_shapes)
            agilus_obj = doc.addObject("Part::Feature", f"Lens_{lens_idx+1}_Agilus30")
            agilus_obj.Shape = agilus_compound
            
            # Export as STL
            stl_filename = multi_material_dir / f"lens_{lens_idx+1}_Agilus30_{material_info['Agilus30']['code']}.stl"
            mesh = doc.addObject("Mesh::Feature", f"Lens_{lens_idx+1}_Agilus30_Mesh")
            mesh.Mesh = Mesh.Mesh(agilus_compound.tessellate(0.1))
            mesh.Mesh.write(str(stl_filename))
            
            all_materials.append({
                "lens": lens_idx + 1,
                "material": "Agilus30",
                "file": str(stl_filename.name),
                "code": material_info['Agilus30']['code'],
                "voxel_count": len(agilus_shapes)
            })
        
        if veroclear_shapes:
            veroclear_compound = Part.makeCompound(veroclear_shapes)
            veroclear_obj = doc.addObject("Part::Feature", f"Lens_{lens_idx+1}_VeroClear")
            veroclear_obj.Shape = veroclear_compound
            
            # Export as STL
            stl_filename = multi_material_dir / f"lens_{lens_idx+1}_VeroClear_{material_info['VeroClear']['code']}.stl"
            mesh = doc.addObject("Mesh::Feature", f"Lens_{lens_idx+1}_VeroClear_Mesh")
            mesh.Mesh = Mesh.Mesh(veroclear_compound.tessellate(0.1))
            mesh.Mesh.write(str(stl_filename))
            
            all_materials.append({
                "lens": lens_idx + 1,
                "material": "VeroClear", 
                "file": str(stl_filename.name),
                "code": material_info['VeroClear']['code'],
                "voxel_count": len(veroclear_shapes)
            })
        
        current_z += LENS_THICKNESS_MM + GAP_BETWEEN_LENSES_MM
    
    # Export complete assembly as STEP file
    step_filename = multi_material_dir / "complete_lens_assembly.step"
    objects = [obj for obj in doc.Objects if hasattr(obj, 'Shape')]
    if objects:
        Part.export(objects, str(step_filename))
        print(f"Exported complete assembly: {step_filename}")
    
    # Save material assignment info
    material_assignment = {
        "description": "Multi-material lens stack for PolyJet printing",
        "total_dimensions_mm": {
            "x": LENS_WIDTH_MM,
            "y": LENS_WIDTH_MM, 
            "z": NUM_LENSES * LENS_THICKNESS_MM + (NUM_LENSES - 1) * GAP_BETWEEN_LENSES_MM
        },
        "materials": material_info,
        "files": all_materials,
        "print_instructions": {
            "printer_type": "PolyJet (e.g., Stratasys J750)",
            "vendor": "PCBWAY or similar",
            "import_notes": "Import all *_RGD_*.stl files into GrabCAD Print as an assembly",
            "support_material": "Required for overhangs and thin features"
        }
    }
    
    with open(multi_material_dir / "material_assignment.json", 'w') as f:
        json.dump(material_assignment, f, indent=2)
    
    # Create shell script for batch processing
    shell_script = multi_material_dir / "generate_stls.sh"
    script_content = f"""#!/bin/bash
# Generated script for creating STL files from OpenSCAD
# Run this in the multi_material_stl directory

echo "Generating STL files for multi-material PolyJet printing..."

"""
    
    for material in all_materials:
        lens_num = material['lens']
        mat_name = material['material']
        scad_file = f"lens_{lens_num}_{mat_name}.scad"
        
        script_content += f"""
# Generate {mat_name} parts for lens {lens_num}
echo "Processing {scad_file}..."
if [ -f "{scad_file}" ]; then
    openscad -o "{material['file']}" "{scad_file}"
else
    echo "Warning: {scad_file} not found"
fi
"""
    
    script_content += """
echo "STL generation complete!"
echo "Import all *_RGD_*.stl files into GrabCAD Print as an assembly"
"""
    
    with open(shell_script, 'w') as f:
        f.write(script_content)
    
    # Make shell script executable
    os.chmod(shell_script, 0o755)
    
    FreeCAD.closeDocument(doc.Name)
    print(f"Multi-material export complete: {multi_material_dir}")

def _export_multi_material_openscad(binary_designs, output_dir):
    """Fallback export using OpenSCAD when FreeCAD is not available."""
    output_dir = Path(output_dir)
    multi_material_dir = output_dir / "multi_material_stl"
    multi_material_dir.mkdir(parents=True, exist_ok=True)
    
    # Material codes for PolyJet
    material_codes = {
        "Agilus30": "RGD_FFF00064",
        "VeroClear": "RGD_810"
    }
    
    current_z = 0
    
    for lens_idx in range(NUM_LENSES):
        for material_name in ["Agilus30", "VeroClear"]:
            scad_file = multi_material_dir / f"lens_{lens_idx+1}_{material_name}.scad"
            
            script = f"""// {material_name} parts for lens {lens_idx+1}
// Material code: {material_codes[material_name]}

module voxel(x, y, z) {{
    translate([x, y, z])
        cube([{VOXEL_SIZE_MM}, {VOXEL_SIZE_MM}, {LENS_THICKNESS_MM}]);
}}

// {material_name} voxels
"""
            
            voxel_count = 0
            for i in range(NUM_XY_SEGMENTS):
                for j in range(NUM_XY_SEGMENTS):
                    x = i * VOXEL_SIZE_MM
                    y = j * VOXEL_SIZE_MM
                    z = current_z
                    
                    # Check if this voxel should be this material
                    is_veroclear = binary_designs[lens_idx][i][j] > 0.5
                    
                    if (material_name == "VeroClear" and is_veroclear) or \
                       (material_name == "Agilus30" and not is_veroclear):
                        script += f"voxel({x}, {y}, {z});\n"
                        voxel_count += 1
            
            # Only create file if there are voxels for this material
            if voxel_count > 0:
                with open(scad_file, 'w') as f:
                    f.write(script)
        
        current_z += LENS_THICKNESS_MM + GAP_BETWEEN_LENSES_MM
    
    # Create generation script
    shell_script = multi_material_dir / "generate_stls.sh"
    script_content = """#!/bin/bash
# Generate STL files for multi-material PolyJet printing

echo "Generating STL files..."

for scad_file in *.scad; do
    if [ -f "$scad_file" ]; then
        base_name=$(basename "$scad_file" .scad)
        stl_file="${base_name}.stl"
        echo "Processing $scad_file -> $stl_file"
        openscad -o "$stl_file" "$scad_file"
    fi
done

echo "STL generation complete!"
echo "Import all *_RGD_*.stl files into GrabCAD Print as an assembly"
"""
    
    with open(shell_script, 'w') as f:
        f.write(script_content)
    
    os.chmod(shell_script, 0o755)
    
    print(f"OpenSCAD-based multi-material export complete: {multi_material_dir}")

if __name__ == "__main__":
    print("This module provides functions for exporting lenses with FreeCAD.")
    print("Import this module and use the functions programmatically.")